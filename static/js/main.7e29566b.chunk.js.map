{"version":3,"sources":["components/ClockDisplay.js","components/ClockControls.js","components/ClockSettings.js","components/Clock.js","App.js","index.js"],"names":["ClockDisplay","clockTime","currentClockRef","minutes","current","seconds","otherClockTime","break","work","otherClockMins","otherClockSecs","otherClockLabel","className","ClockControls","isRunning","setIsRunning","setClockTime","customSettingsRef","viewSettings","setViewSettings","playPauseButton","onClick","type","currentClock","ClockSettings","handleFormSubmit","e","preventDefault","FormData","target","values","id","parseInt","onSubmit","name","pattern","required","Clock","defaultClockTime","useState","useRef","clockSettings","useEffect","interval","setInterval","clearInterval","handleClockSwitch","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e29566b.chunk.js","sourcesContent":["export default function ClockDisplay({ clockTime, currentClockRef }) {\r\n  const minutes =\r\n    clockTime[currentClockRef.current].minutes < 10\r\n      ? `0${clockTime[currentClockRef.current].minutes}`\r\n      : clockTime[currentClockRef.current].minutes;\r\n  const seconds =\r\n    clockTime[currentClockRef.current].seconds < 10\r\n      ? `0${clockTime[currentClockRef.current].seconds}`\r\n      : clockTime[currentClockRef.current].seconds;\r\n\r\n  const otherClockTime =\r\n    currentClockRef.current === \"work\" ? clockTime.break : clockTime.work;\r\n\r\n  const otherClockMins =\r\n    otherClockTime.minutes < 10\r\n      ? `0${otherClockTime.minutes}`\r\n      : otherClockTime.minutes;\r\n\r\n  const otherClockSecs =\r\n    otherClockTime.seconds < 10\r\n      ? `0${otherClockTime.seconds}`\r\n      : otherClockTime.seconds;\r\n\r\n  const otherClockLabel = currentClockRef.current === \"work\" ? \"Break\" : \"Work\";\r\n\r\n  return (\r\n    <div className=\"display\">\r\n      <div className=\"main-display\">\r\n        <div className=\"minutes\">\r\n          <h2>{minutes}</h2>\r\n        </div>\r\n        <span>:</span>\r\n        <div className=\"seconds\">\r\n          <h2>{seconds}</h2>\r\n        </div>\r\n      </div>\r\n      <div className=\"other-clock\">\r\n        <h6>{otherClockLabel} set as</h6>\r\n        <h4>{`${otherClockMins} : ${otherClockSecs}`}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export default function ClockControls({\r\n  isRunning,\r\n  setIsRunning,\r\n  setClockTime,\r\n  customSettingsRef,\r\n  currentClockRef,\r\n  viewSettings,\r\n  setViewSettings,\r\n}) {\r\n  const handleStartPauseClick = () => setIsRunning(!isRunning);\r\n\r\n  const handleResetClick = () => {\r\n    setIsRunning(false);\r\n    setClockTime({\r\n      ...customSettingsRef.current,\r\n      currentClock: currentClockRef.current,\r\n    });\r\n  };\r\n\r\n  const handleSettingsClick = () => setViewSettings(!viewSettings);\r\n\r\n  const playPauseButton = isRunning ? \"Pause\" : \"Start\";\r\n\r\n  return (\r\n    <>\r\n      <div className=\"controls\">\r\n        <div className=\"clock-controls\">\r\n          <button\r\n            onClick={handleStartPauseClick}\r\n            className=\"start-pause\"\r\n            type=\"button\"\r\n          >\r\n            {playPauseButton}\r\n          </button>\r\n          <button onClick={handleResetClick} className=\"reset\" type=\"button\">\r\n            Reset\r\n          </button>\r\n        </div>\r\n        <button\r\n          onClick={handleSettingsClick}\r\n          className=\"settings-button\"\r\n          type=\"button\"\r\n        >\r\n          Settings\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","export default function ClockSettings({\r\n  setClockTime,\r\n  customSettingsRef,\r\n  setViewSettings,\r\n}) {\r\n  const handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const [minutes, seconds] = new FormData(e.target).values();\r\n\r\n    if (e.target.id === \"work-form\") {\r\n      customSettingsRef.current = {\r\n        ...customSettingsRef.current,\r\n        work: {\r\n          minutes: parseInt(minutes),\r\n          seconds: parseInt(seconds),\r\n        },\r\n      };\r\n    } else {\r\n      customSettingsRef.current = {\r\n        ...customSettingsRef.current,\r\n        break: {\r\n          minutes: parseInt(minutes),\r\n          seconds: parseInt(seconds),\r\n        },\r\n      };\r\n    }\r\n\r\n    setClockTime(customSettingsRef.current);\r\n  };\r\n\r\n  const handleFormClose = () => {\r\n    setViewSettings(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"settings fadeIn\">\r\n      <h2>Custom Settings</h2>\r\n\r\n      <div className=\"forms-container\">\r\n        <form id=\"work-form\" onSubmit={(e) => handleFormSubmit(e)}>\r\n          <h3>Work Time</h3>\r\n          <label>Enter Minutes</label>\r\n          <input name=\"custom-minutes\" type=\"number\" pattern=\"\\d*\" required />\r\n          <label>Enter Seconds</label>\r\n          <input name=\"custom-seconds\" type=\"number\" pattern=\"\\d*\" required />\r\n          <button type=\"submit\">Submit</button>\r\n        </form>\r\n        <form id=\"break-form\" onSubmit={(e) => handleFormSubmit(e)}>\r\n          <h3>Break Time</h3>\r\n          <label>Enter Minutes</label>\r\n          <input name=\"custom-minutes\" type=\"number\" pattern=\"\\d*\" required />\r\n          <label>Enter Seconds</label>\r\n          <input name=\"custom-seconds\" type=\"number\" pattern=\"\\d*\" required />\r\n          <button type=\"submit\">Submit</button>\r\n        </form>\r\n      </div>\r\n      <button className=\"cancel-button\" onClick={handleFormClose} type=\"button\">\r\n        Close\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import ClockDisplay from \"./ClockDisplay.js\";\r\nimport ClockControls from \"./ClockControls.js\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport ClockSettings from \"./ClockSettings.js\";\r\n\r\nexport default function Clock() {\r\n  const defaultClockTime = {\r\n    currentClock: \"work\",\r\n    work: {\r\n      minutes: 0,\r\n      seconds: 3,\r\n    },\r\n    break: {\r\n      minutes: 0,\r\n      seconds: 5,\r\n    },\r\n  };\r\n\r\n  const [isRunning, setIsRunning] = useState(false); //intially clock not running\r\n  const [clockTime, setClockTime] = useState(defaultClockTime); //initally set default clock to work, will later be determined by customSettingsRef\r\n  const customSettingsRef = useRef(defaultClockTime); //ref needed to store custom settings. mainly for reset\r\n  const currentClockRef = useRef(clockTime.currentClock);\r\n  const [viewSettings, setViewSettings] = useState(false);\r\n\r\n  const clockSettings = viewSettings && (\r\n    <ClockSettings\r\n      setClockTime={setClockTime}\r\n      customSettingsRef={customSettingsRef}\r\n      setViewSettings={setViewSettings}\r\n      viewSettings={viewSettings}\r\n    />\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      const interval = setInterval(() => {\r\n        if (clockTime[currentClockRef.current].seconds === 0) {\r\n          if (clockTime[currentClockRef.current].minutes !== 0) {\r\n            //handle if seconds hits less than 0 and there are still minutes left, reduce minutes and set seconds\r\n            setClockTime({\r\n              ...clockTime,\r\n              [currentClockRef.current]: {\r\n                minutes: clockTime[currentClockRef.current].minutes - 1,\r\n                seconds: 59,\r\n              },\r\n            });\r\n          } else {\r\n            //if the minutes is 0, and seconds is 0, timer is finished.\r\n            setIsRunning(false);\r\n            if (clockTime.currentClock === \"work\") {\r\n              currentClockRef.current = \"break\";\r\n\r\n              setClockTime({\r\n                ...clockTime,\r\n                work: customSettingsRef.current.work,\r\n                currentClock: \"break\",\r\n              });\r\n            } else {\r\n              currentClockRef.current = \"work\";\r\n\r\n              setClockTime({\r\n                ...clockTime,\r\n                break: customSettingsRef.current.break,\r\n                currentClock: \"work\",\r\n              });\r\n            }\r\n          }\r\n        } else {\r\n          //if seconds is not 0, count down normally\r\n          setClockTime({\r\n            ...clockTime,\r\n            [currentClockRef.current]: {\r\n              ...clockTime[currentClockRef.current],\r\n              seconds: clockTime[currentClockRef.current].seconds - 1,\r\n            },\r\n          });\r\n        }\r\n      }, 1000);\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [isRunning, clockTime]);\r\n\r\n  const handleClockSwitch = (e) => {\r\n    let id = e.target.id;\r\n    if (id === \"work-switch\") {\r\n      id = \"work\";\r\n    } else {\r\n      id = \"break\";\r\n    }\r\n\r\n    setIsRunning(false);\r\n    currentClockRef.current = id;\r\n    setClockTime({\r\n      ...customSettingsRef.current,\r\n      currentClock: currentClockRef.current,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"clock-container\">\r\n      <div className=\"clock-switch\">\r\n        <button\r\n          id=\"work-switch\"\r\n          onClick={(e) => handleClockSwitch(e)}\r\n          type=\"button\"\r\n        >\r\n          Work\r\n        </button>\r\n        <button\r\n          id=\"break-switch\"\r\n          onClick={(e) => handleClockSwitch(e)}\r\n          type=\"button\"\r\n        >\r\n          Break\r\n        </button>\r\n      </div>\r\n      <h4>It's currently {currentClockRef.current} time</h4>\r\n      <ClockDisplay clockTime={clockTime} currentClockRef={currentClockRef} />\r\n      <div className=\"notice\"></div>\r\n      <ClockControls\r\n        isRunning={isRunning}\r\n        setIsRunning={setIsRunning}\r\n        setClockTime={setClockTime}\r\n        customSettingsRef={customSettingsRef}\r\n        currentClockRef={currentClockRef}\r\n        viewSettings={viewSettings}\r\n        setViewSettings={setViewSettings}\r\n      />\r\n      {clockSettings}\r\n    </div>\r\n  );\r\n}\r\n","import Clock from \"./components/Clock\";\r\nimport \"./index.css\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Simple Pomodoro</h1>\r\n      <Clock />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}